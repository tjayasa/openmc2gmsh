SetFactory("OpenCASCADE");
Mesh.CharacteristicLengthMax = 0.1;
Mesh.CharacteristicLengthMin = 0.1;
k = 9;
Include "cube2.geo";
BooleanIntersection(k+8) = { Volume{8}; Delete; }{ Volume{8}; Delete; };
BooleanIntersection(k+1) = { Surface{1}; Delete; }{ Surface{1}; Delete; };
BooleanIntersection(k+2) = { Surface{2}; Delete; }{ Surface{2}; Delete; };
BooleanIntersection(k+3) = { Surface{3}; Delete; }{ Surface{3}; Delete; };
BooleanIntersection(k+4) = { Surface{4}; Delete; }{ Surface{4}; Delete; };
BooleanIntersection(k+5) = { Surface{5}; Delete; }{ Surface{5}; Delete; };
BooleanIntersection(k+6) = { Surface{6}; Delete; }{ Surface{6}; Delete; };
BooleanIntersection(k+k+1) = { Surface{k+1}; Delete; }{ Surface{k+1}; Delete; };
BooleanIntersection(k+k+2) = { Surface{k+2}; Delete; }{ Surface{k+2}; Delete; };
BooleanIntersection(k+k+3) = { Surface{k+3}; Delete; }{ Surface{k+3}; Delete; };
BooleanIntersection(k+k+4) = { Surface{k+4}; Delete; }{ Surface{k+4}; Delete; };
BooleanIntersection(k+k+5) = { Surface{k+5}; Delete; }{ Surface{k+5}; Delete; };
BooleanIntersection(k+k+6) = { Surface{k+6}; Delete; }{ Surface{k+6}; Delete; };
BooleanIntersection(k+k+k+1) = { Surface{k+k+1}; Delete; }{ Surface{k+k+1}; Delete; };
BooleanIntersection(k+k+k+2) = { Surface{k+k+2}; Delete; }{ Surface{k+k+2}; Delete; };
BooleanIntersection(k+k+k+3) = { Surface{k+k+3}; Delete; }{ Surface{k+k+3}; Delete; };
BooleanIntersection(k+k+k+4) = { Surface{k+k+4}; Delete; }{ Surface{k+k+4}; Delete; };
BooleanIntersection(k+k+k+5) = { Surface{k+k+5}; Delete; }{ Surface{k+k+5}; Delete; };
BooleanIntersection(k+k+k+6) = { Surface{k+k+6}; Delete; }{ Surface{k+k+6}; Delete; };
BooleanIntersection(k+k+k+k+1) = { Surface{k+k+k+1}; Delete; }{ Surface{k+k+k+1}; Delete; };
BooleanIntersection(k+k+k+k+2) = { Surface{k+k+k+2}; Delete; }{ Surface{k+k+k+2}; Delete; };
BooleanIntersection(k+k+k+k+3) = { Surface{k+k+k+3}; Delete; }{ Surface{k+k+k+3}; Delete; };
BooleanIntersection(k+k+k+k+4) = { Surface{k+k+k+4}; Delete; }{ Surface{k+k+k+4}; Delete; };
BooleanIntersection(k+k+k+k+5) = { Surface{k+k+k+5}; Delete; }{ Surface{k+k+k+5}; Delete; };
BooleanIntersection(k+k+k+k+6) = { Surface{k+k+k+6}; Delete; }{ Surface{k+k+k+6}; Delete; };
